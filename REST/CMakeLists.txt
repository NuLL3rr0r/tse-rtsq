#  (The MIT License)
#
#  Copyright (c) 2015 Mohammad S. Babaei
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.


IF ( BUILD_REST )
    FILE ( GLOB REST_SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp )

    SET ( REST_BIN_FILE "${REST_BIN_NAME}" )

    IF ( NOT WIN32 AND NOT MINGW )
        ADD_EXECUTABLE ( ${REST_BIN_FILE} ${REST_SOURCE_FILES} )
    ELSE (  )
        CONFIGURE_FILE ( "${REST_APP_ICON_FILE}" "${CMAKE_CURRENT_BINARY_DIR}/${REST_APP_ICON_FILE}"
            COPYONLY )
        CONFIGURE_FILE ( "${REST_RC_FILE}" "${CMAKE_CURRENT_BINARY_DIR}/${REST_RC_FILE}"
            @ONLY NEWLINE_STYLE CRLF )
        SET ( CMAKE_RC_COMPILER_INIT windres )
        ENABLE_LANGUAGE( RC )
        SET ( CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
        ADD_EXECUTABLE ( ${REST_BIN_FILE} ${REST_SOURCE_FILES} "${CMAKE_CURRENT_BINARY_DIR}/${REST_RC_FILE}" )
    ENDIF (  )

    FOREACH ( FLAG ${CXX11_FEATURE_LIST} )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE}
            APPEND PROPERTY COMPILE_DEFINITIONS ${FLAG} )
    ENDFOREACH ( FLAG ${CXX11_FEATURE_LIST} )

    TARGET_LINK_LIBRARIES ( ${REST_BIN_FILE}
        ${CORELIB_BIN_NAME}
        ${Boost_LIBRARIES}
        ${WT_LIBRARY}
    )

    IF ( "${WT_APPLICATION_TYPE}" STREQUAL "FASTCGI" )
        TARGET_LINK_LIBRARIES ( ${REST_BIN_FILE}
            ${WT_FCGI_LIBRARY}
        )
    ELSEIF ( "${WT_APPLICATION_TYPE}" STREQUAL "WTHTTPD" )
        TARGET_LINK_LIBRARIES ( ${REST_BIN_FILE}
            ${WT_HTTPD_LIBRARY}
        )
    ENDIF (  )

    IF ( DEFINED CXX_COMPILE_MODE )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE=${CXX_COMPILE_MODE}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_98=${CXX_COMPILE_MODE_98}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_03=${CXX_COMPILE_MODE_03}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_0x=${CXX_COMPILE_MODE_0x}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_11=${CXX_COMPILE_MODE_11}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_1y=${CXX_COMPILE_MODE_1y}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_14=${CXX_COMPILE_MODE_14}" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CXX_COMPILE_MODE_1z=${CXX_COMPILE_MODE_1z}" )
    ENDIF (  )

    IF ( DEFINED REST_DEFINES )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "${REST_DEFINES}" )
    ENDIF (  )

    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_COMPILER=\"${BUILD_INFO_COMPILER}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_HOST=\"${BUILD_INFO_HOST}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_PROCESSOR=\"${BUILD_INFO_PROCESSOR}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_SYSTEM=\"${BUILD_INFO_SYSTEM}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COMPANY_NAME=\"${PRODUCT_COMPANY_NAME}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_HOLDER=\"${PRODUCT_COPYRIGHT_HOLDER}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_YEAR=\"${PRODUCT_COPYRIGHT_YEAR}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT=\"${PRODUCT_COPYRIGHT}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_INTERNAL_NAME=\"${TSE_RTSQ_REST_PRODUCT_INTERNAL_NAME}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_NAME=\"${TSE_RTSQ_REST_PRODUCT_NAME}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_MAJOR=${TSE_RTSQ_REST_PRODUCT_VERSION_MAJOR}" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_MINOR=${TSE_RTSQ_REST_PRODUCT_VERSION_MINOR}" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_PATCH=${TSE_RTSQ_REST_PRODUCT_VERSION_PATCH}" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_REVISION=\"${PRODUCT_VERSION_REVISION}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION=\"${TSE_RTSQ_REST_PRODUCT_VERSION}\"" )
    SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_DESCRIPTION=\"${TSE_RTSQ_REST_PRODUCT_DESCRIPTION}\"" )

    IF ( DEFINED DATABASE_BACKEND )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "SQLITE3=0" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL=1" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL=2" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "DATABASE_BACKEND=${DATABASE_BACKEND}" )
    ENDIF (  )

    IF ( DEFINED SQLITE3_FOUND )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "HAS_SQLITE3" )
    ENDIF (  )

    IF ( "${DATABASE_BACKEND}" STREQUAL "PGSQL" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_HOST=\"${PGSQL_HOST}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_PORT=\"${PGSQL_PORT}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_DATABASE=\"${PGSQL_DATABASE}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_USER=\"${PGSQL_USER}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_PASSWORD=\"${PGSQL_PASSWORD}\"" )
    ELSEIF ( "${DATABASE_BACKEND}" STREQUAL "MYSQL" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_HOST=\"${MYSQL_HOST}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_PORT=\"${MYSQL_PORT}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_UNIX_SOCKET=\"${MYSQL_UNIX_SOCKET}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_DATABASE=\"${MYSQL_DATABASE}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_USER=\"${MYSQL_USER}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MYSQL_PASSWORD=\"${MYSQL_PASSWORD}\"" )
    ELSE (  ) # SQLITE3
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "SQLITE3_DATABASE_FILE_PATH=\"${SQLITE3_DATABASE_FILE_PATH}\"" )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "SQLITE3_DATABASE_FILE_NAME=\"${SQLITE3_DATABASE_FILE_NAME}\"" )
    ENDIF (  )

    IF ( DEFINED STOCK_DATA_SOURCE_URL )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "STOCK_DATA_SOURCE_URL=\"${STOCK_DATA_SOURCE_URL}\"" )
    ENDIF (  )

    IF ( DEFINED STOCK_DATA_UPDATE_INTERVAL_SECONDS )
        SET_PROPERTY ( TARGET ${REST_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "STOCK_DATA_UPDATE_INTERVAL_SECONDS=${STOCK_DATA_UPDATE_INTERVAL_SECONDS}" )
    ENDIF (  )

    GET_PROPERTY( REST_EXECUTABLE TARGET ${REST_BIN_FILE} PROPERTY LOCATION )

    IF ( CXX_GCC AND GCC_STRIP_EXECUTABLES )
        ADD_CUSTOM_COMMAND ( TARGET ${REST_BIN_FILE}
            POST_BUILD
            COMMAND strip ${REST_EXECUTABLE}
            COMMAND strip -R.comment ${REST_EXECUTABLE}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        )
    ENDIF (  )

    IF ( WIN32 AND MINGW )
        IF ( CORELIB_LINK_TYPE STREQUAL "SHARED" )
            GET_PROPERTY( CORELIB_LIBRARY_PATH TARGET ${CORELIB_BIN_NAME} PROPERTY LOCATION )

            ADD_CUSTOM_COMMAND ( TARGET ${REST_BIN_FILE}
                POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${CORELIB_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_CHRONO_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_DATE_TIME_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_FILESYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_REGEXLIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_SYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${BOOST_THREAD_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${CPPDB_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${CPPDB_SQLITE3_DRIVER}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${CRYPTOPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${CURLPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${GEOIP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${LIBB64_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${LIBCURL_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${SQLITE3_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${VMIME_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${WT_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${WT_FCGI_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            )
        ENDIF (  )
    ELSE (  )
        IF ( DEFINED APP_ROOT_DIR )
            EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/db" )
            EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/etc" )
            EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/log" )
            EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/tmp" )
            EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/www" )

            INSTALL ( FILES
                "${CMAKE_CURRENT_SOURCE_DIR}/resources/wt_config.xml"
                DESTINATION "${APP_ROOT_DIR}/etc"
                PERMISSIONS
                OWNER_READ
                GROUP_READ
                WORLD_READ
            )

            INSTALL ( DIRECTORY
                "${WT_RESOURCES_DIR}"
                DESTINATION "${APP_ROOT_DIR}/www"
                FILE_PERMISSIONS
                OWNER_READ
                GROUP_READ
                WORLD_READ
                DIRECTORY_PERMISSIONS
                OWNER_READ OWNER_EXECUTE
                GROUP_READ GROUP_EXECUTE
                WORLD_READ WORLD_EXECUTE
            )

            INSTALL ( FILES
                "${CMAKE_CURRENT_BINARY_DIR}/${REST_BIN_FILE}"
                DESTINATION "${APP_ROOT_DIR}/www"
                PERMISSIONS
                OWNER_READ OWNER_EXECUTE
                GROUP_READ GROUP_EXECUTE
                WORLD_READ WORLD_EXECUTE
            )
        ENDIF (  )
    ENDIF (  )
ENDIF (  )

